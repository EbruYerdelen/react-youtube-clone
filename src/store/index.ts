import { configureStore, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { InitialState } from "../Types";
import { getHomePageVideos } from "./reducers/getHomePageVideos";
import { getSearchPageVideos } from "./reducers/getSearchPageVideos";
import { getVideoDetails } from "./reducers/getVideoDetails";
import { getRecommendedVideos } from "./reducers/getRecommendedVideos";

const initialState: InitialState = {
  videos: [],
  currentPlaying:null,
  searchTerm: "",
  searchResults:[],
  nextPageToken:null,
  recommendedVideos:[]

}

const YoutubeSlice = createSlice({
  name: "youtubeApp",
  initialState,
  //this reducer(synchronous action handler) below will be called whenever we changed the page(go to searhPage)
  reducers: {
    //these are reducers but redux toolkit automatically generates action creators with them.
    /*
    dispatch(clearVideos());
    clearVideos here is actually an action creator, not a reducer. It's automatically generated by Redux Toolkit's createSlice when you define a reducer function named clearVideos inside createSlice.
    Action Creator: Redux Toolkit generates action creators for each reducer function defined in createSlice. These action creators create and return action objects when called.
    */
    clearVideos: (state) => {
      state.videos = [];
      state.nextPageToken = null;
    },
    changeSearchTerm: (state, action: PayloadAction<string>) => {
      state.searchTerm = action.payload;
    },
    clearSearchTerm: (state) => {
      state.searchTerm = "";
    }
  },
  extraReducers: (builder) => {
    builder.addCase(getHomePageVideos.fulfilled, (state, action) => {
      state.videos = action.payload.parsedData;
      state.nextPageToken = action.payload.nextPageToken;
    });

    builder.addCase(getSearchPageVideos.fulfilled, (state, action) => {
      state.videos = action.payload.parsedData;
      state.nextPageToken = action.payload.nextPageToken;
    });

    builder.addCase(getVideoDetails.fulfilled, (state, action) => {
      state.currentPlaying = action.payload;
    });

    builder.addCase(getRecommendedVideos.fulfilled, (state, action) => {
      state.recommendedVideos = action.payload.parsedData;
    });
  },
});


export const store = configureStore({
  reducer: {
    youtubeApp: YoutubeSlice.reducer,
  }
});

export const { clearVideos,changeSearchTerm,clearSearchTerm } = YoutubeSlice.actions;

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;